package FML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AtomicShape;
  private ConceptPresentation props_Attribute;
  private ConceptPresentation props_Canvas;
  private ConceptPresentation props_ComplexShape;
  private ConceptPresentation props_Shape;
  private ConceptPresentation props_ShapeReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AtomicShape:
        if (props_AtomicShape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AtomicShape = cpb.create();
        }
        return props_AtomicShape;
      case LanguageConceptSwitch.Attribute:
        if (props_Attribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Attribute = cpb.create();
        }
        return props_Attribute;
      case LanguageConceptSwitch.Canvas:
        if (props_Canvas == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Canvas");
          props_Canvas = cpb.create();
        }
        return props_Canvas;
      case LanguageConceptSwitch.ComplexShape:
        if (props_ComplexShape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexShape = cpb.create();
        }
        return props_ComplexShape;
      case LanguageConceptSwitch.Shape:
        if (props_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Shape = cpb.create();
        }
        return props_Shape;
      case LanguageConceptSwitch.ShapeReference:
        if (props_ShapeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xa92a6e05bbaf47feL, 0x8d9a530de3a9cd83L, 0x7e31924bbfe041dbL, 0x7e31924bbfe047f0L, "shape", "", "");
          props_ShapeReference = cpb.create();
        }
        return props_ShapeReference;
    }
    return null;
  }
}
